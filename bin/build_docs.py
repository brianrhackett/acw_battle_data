import sys
import os
import re
from os import path
import json
import shutil
import subprocess as sp
from tabulate import tabulate

import jinja2

def filter_citation(value):
    """ Jinja2 filter for restructured text citation """
    return '[' + value.strip() + ']_'

def filter_table(value):
    """ Jinja2 filter for an restructured text table """
    return tabulate(value, tablefmt="rst")
    
def build_file(dstfile, template, env, metadata):
    template = env.get_template(template)
    rendered = template.render(metadata)
    with open(dstfile, 'w') as f:
        f.write(rendered)

def build_resources(docs, env, metadata):
    data_doc_dir = path.join(docs, 'resources')
    if path.exists(data_doc_dir):
        shutil.rmtree(data_doc_dir)
    os.makedirs(data_doc_dir)
    template = env.get_template('resource.rst')
    for res in metadata['resources']:
        if 'schema' in res:
            res['summary_table'] = [[x['name'], x['type'], x['title']] for x in res['schema']['fields']]
        rendered = template.render(res)
        with open(path.join(data_doc_dir, res['name'] + '.rst'), 'w') as f:
            f.write(rendered)

def update_version(conffile, metadata):
    with open(conffile, 'r') as f:
        conf = f.readlines()
    newconf = []
    for line in conf:
        m = re.match(r"(version|release)\s*=\s*['""](.*?)['""].*", line)
        if m:
            line = "%s = '%s' # autogenerated by build_docs.py \n" % (m.group(1), metadata['version'])
        newconf.append(line)
    with open(conffile, 'w') as f:
        f.writelines(newconf)

def build(src, dst, docs):
    env = jinja2.Environment(loader = jinja2.FileSystemLoader(path.join(src, 'templates')), autoescape = False)
    env.filters['citation'] = filter_citation
    env.filters['rsttable'] = filter_table
    with open(path.join(dst, 'datapackage.json'), 'r') as f:
        metadata = json.load(f)
    update_version(path.join(docs, "conf.py"), metadata)
    build_file(path.join(docs, "index.rst"), 'index.rst', env, metadata)
    build_file(path.join(docs, "sources.rst"), 'sources.rst', env, metadata)
    build_resources(docs, env, metadata)

def main():
    src = sys.argv[1]
    dst = sys.argv[2]
    docs = sys.argv[3]
    build(src, dst, docs)

if __name__ == '__main__':
    main()
